(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{409:function(a,t,v){"use strict";v.r(t);var r=v(56),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"走进java"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#走进java"}},[a._v("#")]),a._v(" 走进Java")]),a._v(" "),v("p",[a._v("​\t"),v("strong",[a._v("JDK —— java开发工具包，Java程序语言设计、Java虚拟机、Java API类库统称为JDK，JVM和类库子集称为 JRE（Java运行时环境）")])]),a._v(" "),v("h1",{attrs:{id:"java内存区域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java内存区域"}},[a._v("#")]),a._v(" Java内存区域")]),a._v(" "),v("p",[a._v("​\t"),v("strong",[a._v("方法区、堆、虚拟机栈、本地方法栈、程序计数器")])]),a._v(" "),v("h2",{attrs:{id:"程序计数器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),v("p",[a._v("​\t程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。如果当前线程执行的是一个Java方法，则计数器记录的是虚拟机字节码指令的地址；如果执行的是Native方法，则值为空。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。")]),a._v(" "),v("h2",{attrs:{id:"java虚拟机栈"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java虚拟机栈"}},[a._v("#")]),a._v(" Java虚拟机栈")]),a._v(" "),v("p",[a._v("​\t同程序计数器一样是线程私有的，生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。")])])}),[],!1,null,null,null);t.default=s.exports}}]);