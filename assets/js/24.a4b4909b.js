(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{422:function(t,s,a){"use strict";a.r(s);var n=a(56),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),a("h2",{attrs:{id:"版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本控制"}},[t._v("#")]),t._v(" 版本控制")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是版本控制 版本迭代")])]),t._v(" "),a("p",[t._v("​\t\t版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。")]),t._v(" "),a("ul",[a("li",[t._v("实现跨区域多人协同开发")]),t._v(" "),a("li",[t._v("追踪和记载一个或者多个文件的历史记录")]),t._v(" "),a("li",[t._v("组织和保护你的源代码和文档")]),t._v(" "),a("li",[t._v("统计工作量")]),t._v(" "),a("li",[t._v("并行开发、提高开发效率")]),t._v(" "),a("li",[t._v("跟踪记录整个软件的开发过程")]),t._v(" "),a("li",[t._v("减轻开发人员的负担，节省时间，同时降低人为错误")])]),t._v(" "),a("p",[t._v("简单说就是用于管理多人协同开发项目的技术。")]),t._v(" "),a("p",[t._v("​\t\t没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。")]),t._v(" "),a("p",[t._v("无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！")]),t._v(" "),a("blockquote",[a("p",[t._v("常见的版本控制工具啊实打实")])]),t._v(" "),a("p",[t._v("主流的版本控制器有如下这些：")]),t._v(" "),a("ul",[a("li",[t._v("Git")]),t._v(" "),a("li",[t._v("SVN（Subversion）")]),t._v(" "),a("li",[t._v("CVS（Concurrent Versions System）")]),t._v(" "),a("li",[t._v("VSS（Micorosoft Visual SourceSafe）")]),t._v(" "),a("li",[t._v("TFS（Team Foundation Server）")]),t._v(" "),a("li",[t._v("Visual Studio Online")])]),t._v(" "),a("p",[t._v("​\t\t版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN")]),t._v(" "),a("blockquote",[a("p",[t._v("版本控制分类")])]),t._v(" "),a("ol",[a("li",[t._v("本地版本控制 : 记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS")]),t._v(" "),a("li",[t._v("集中版本控制 : 所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改，如SVN")]),t._v(" "),a("li",[t._v("分布式版本控制:  Git")])]),t._v(" "),a("p",[t._v("​\t\t所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。")]),t._v(" "),a("blockquote",[a("p",[t._v("Git与SVN最主要取别")])]),t._v(" "),a("p",[t._v("​\t\tSVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。")]),t._v(" "),a("p",[t._v("​\t\tGit是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件。")]),t._v(" "),a("h2",{attrs:{id:"git环境配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git环境配置"}},[t._v("#")]),t._v(" Git环境配置")]),t._v(" "),a("blockquote",[a("p",[t._v("下载")])]),t._v(" "),a("p",[t._v("打开 https://git-scm.com/，下载git对应操作系统的版本。")]),t._v(" "),a("p",[t._v("官网下载太慢，我们可以使用淘宝镜像下载：http://npm.taobao.org/mirrors/git-for-windows/")]),t._v(" "),a("blockquote",[a("p",[t._v("Git配置")])]),t._v(" "),a("p",[t._v("查看配置 git config -l")]),t._v(" "),a("img",{staticStyle:{zoom:"80%",float:"left"},attrs:{src:"Git.assets/image-20220118224524015-16425176018031.png",alt:"image-20220118224524015"}}),t._v(" "),a("p",[t._v("查看不同级别的配置文件:")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看系统config")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --system --list\n　　\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看当前用户（global）配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global  --list\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("blockquote",[a("p",[t._v("设置用户名与邮箱")])]),t._v(" "),a("p",[t._v("​\t\t当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"senny"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1339632204")]),t._v("@qq.com   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#邮箱")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("​\t\t只需要做一次这个设置，如果你传递了--global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要--global选项。总之--global为全局配置，不加为某个项目的特定配置。")]),t._v(" "),a("h2",{attrs:{id:"git基础理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git基础理论"}},[t._v("#")]),t._v(" Git基础理论")]),t._v(" "),a("blockquote",[a("p",[t._v("三个区域")])]),t._v(" "),a("p",[t._v("Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。")]),t._v(" "),a("ul",[a("li",[t._v("Workspace：工作区，就是你平时存放项目代码的地方")]),t._v(" "),a("li",[t._v("Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息")]),t._v(" "),a("li",[t._v("Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本")]),t._v(" "),a("li",[t._v("Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换")])]),t._v(" "),a("p",[t._v("本地的三个区域确切的说应该是git仓库中HEAD指向的版本")]),t._v(" "),a("ul",[a("li",[t._v("Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。")]),t._v(" "),a("li",[t._v("WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。")]),t._v(" "),a("li",[t._v(".git：存放Git管理信息的目录，初始化仓库的时候自动创建。")]),t._v(" "),a("li",[t._v("Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。")]),t._v(" "),a("li",[t._v("Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。")]),t._v(" "),a("li",[t._v("Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。")])]),t._v(" "),a("blockquote",[a("p",[t._v("工作流程")])]),t._v(" "),a("p",[t._v("git的工作流程一般是这样的：")]),t._v(" "),a("p",[t._v("１、在工作目录中添加、修改文件；")]),t._v(" "),a("p",[t._v("２、将需要进行版本管理的文件放入暂存区域；")]),t._v(" "),a("p",[t._v("３、将暂存区域的文件提交到git仓库。")]),t._v(" "),a("p",[t._v("因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)")]),t._v(" "),a("h2",{attrs:{id:"git项目搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git项目搭建"}},[t._v("#")]),t._v(" Git项目搭建")]),t._v(" "),a("blockquote",[a("p",[t._v("创建工作目录与常用指令")])]),t._v(" "),a("p",[t._v("workspace -> "),a("code",[t._v("add")]),t._v(" -> index -> "),a("code",[t._v("commit")]),t._v(" -> Repository -> "),a("code",[t._v("push")]),t._v(" -> Remote\nRemote -> "),a("code",[t._v("fetch/clone")]),t._v(" -> Repository -> "),a("code",[t._v("checkout")]),t._v(" -> workspace")]),t._v(" "),a("blockquote",[a("p",[t._v("本地仓库搭建")])]),t._v(" "),a("p",[t._v("创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库")]),t._v(" "),a("p",[t._v("1、创建全新的仓库，需要用GIT管理的项目的根目录执行：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在当前目录新建一个Git代码库")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里")]),t._v(" "),a("blockquote",[a("p",[t._v("克隆远程仓库")])]),t._v(" "),a("p",[t._v("1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 克隆一个项目和它的整个代码历史(版本信息)")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://github.com/senny-fight.git")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"git文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git文件操作"}},[t._v("#")]),t._v(" Git文件操作")]),t._v(" "),a("blockquote",[a("p",[t._v("文件的四种状态")])]),t._v(" "),a("p",[t._v("版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。")]),t._v(" "),a("ul",[a("li",[t._v("Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.")]),t._v(" "),a("li",[t._v("Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件")]),t._v(" "),a("li",[t._v("Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !")]),t._v(" "),a("li",[t._v("Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified")])]),t._v(" "),a("blockquote",[a("p",[t._v("查看文件状态")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看指定文件状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看所有文件状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git add .                  添加所有文件到暂存区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# git commit -m "消息内容"    提交暂存区中的内容到本地仓库 -m 提交信息')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("blockquote",[a("p",[t._v("忽略文件")])]),t._v(" "),a("p",[t._v("有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等")]),t._v(" "),a("p",[t._v('在主目录下建立".gitignore"文件，此文件有如下规则：')]),t._v(" "),a("ol",[a("li",[t._v("忽略文件中的空行或以井号（#）开始的行将会被忽略")]),t._v(" "),a("li",[t._v("可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等")]),t._v(" "),a("li",[t._v("如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略")]),t._v(" "),a("li",[t._v("如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。")]),t._v(" "),a("li",[t._v("如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("*.txt        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lib.txt     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#但lib.txt除外")]),t._v("\n/temp        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#仅忽略项目根目录下的TODO文件,不包括其它目录temp")]),t._v("\nbuild/       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#忽略build/目录下的所有文件")]),t._v("\ndoc/*.txt    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"gitee-github的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitee-github的使用"}},[t._v("#")]),t._v(" gitee/github的使用")]),t._v(" "),a("p",[t._v("/**/")]),t._v(" "),a("p",[t._v("1.注册")]),t._v(" "),a("p",[t._v("2、设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入 C:\\Users\\Administrator\\.ssh 目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成公钥")]),t._v("\nssh-keygen\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("3、将公钥信息public key 添加到码云账户中即可")]),t._v(" "),a("p",[t._v("4、使用码云创建一个自己的仓库")]),t._v(" "),a("h2",{attrs:{id:"idea中集成git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idea中集成git"}},[t._v("#")]),t._v(" IDEA中集成Git")]),t._v(" "),a("p",[t._v("/**/")]),t._v(" "),a("h2",{attrs:{id:"git分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git分支"}},[t._v("#")]),t._v(" GIT分支")]),t._v(" "),a("blockquote",[a("p",[t._v("git分支常用指令")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有本地分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有远程分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -r\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，但依然停留在当前分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，并切换到该分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并指定分支到当前分支")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除分支")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除远程分支")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -dr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote/branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[t._v("如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交，选择要保留他的代码还是你的代码")])])}),[],!1,null,null,null);s.default=e.exports}}]);